import { NextRequest, NextResponse } from 'next/server';
import { SlideDefinition } from '@/lib/slide-types';
import { exec } from 'child_process';
import { promisify } from 'util';
import fs from 'fs/promises';
import path from 'path';
import os from 'os';

const execAsync = promisify(exec);

/**
 * PPTX to PNG Conversion using LibreOffice Headless
 * 
 * Requires LibreOffice to be installed on the server:
 * Ubuntu/Debian: sudo apt-get install libreoffice
 * macOS: brew install libreoffice
 * 
 * Free but requires server setup
 */

export async function POST(request: NextRequest) {
  try {
    const formData = await request.formData();
    const file = formData.get('file') as File;
    
    if (!file) {
      return NextResponse.json({ error: 'No file provided' }, { status: 400 });
    }
    
    if (!file.name.toLowerCase().endsWith('.pptx')) {
      return NextResponse.json({ error: 'Only .pptx files are supported' }, { status: 400 });
    }

    // Check if LibreOffice is available
    try {
      await execAsync('soffice --version');
      console.log('LibreOffice found, proceeding with conversion...');
    } catch (error) {
      return NextResponse.json({ 
        error: 'LibreOffice not found. Please install LibreOffice or use CloudConvert API instead.' 
      }, { status: 500 });
    }

    const buffer = Buffer.from(await file.arrayBuffer());
    const imageData = await convertPptxToImageWithLibreOffice(buffer, file.name);
    
    // Create slide definition with the image
    const slideJson: SlideDefinition = {
      id: `imported-${Date.now()}`,
      title: `Imported from ${file.name}`,
      background: { 
        color: 'FFFFFF'
      },
      objects: [
        {
          type: 'image',
          path: imageData,
          options: {
            x: 0,
            y: 0,
            w: 10,  // Full slide width
            h: 5.625,  // Full slide height (16:9)
          }
        }
      ],
      notes: `Imported PowerPoint slide from ${file.name} using LibreOffice`
    };

    return NextResponse.json({
      success: true,
      slideJson,
      message: 'PPTX converted to PNG successfully using LibreOffice'
    });

  } catch (error) {
    console.error('LibreOffice conversion error:', error);
    
    return NextResponse.json({
      error: 'Failed to convert PPTX file',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}

/**
 * Convert PPTX to PNG using LibreOffice headless mode
 */
async function convertPptxToImageWithLibreOffice(buffer: Buffer, filename: string): Promise<string> {
  const tempDir = os.tmpdir();
  const inputFile = path.join(tempDir, `input-${Date.now()}.pptx`);
  const outputDir = path.join(tempDir, `output-${Date.now()}`);
  
  try {
    // Write PPTX to temp file
    await fs.writeFile(inputFile, buffer);
    await fs.mkdir(outputDir, { recursive: true });
    
    console.log('Converting PPTX to PNG using LibreOffice...');
    
    // Convert PPTX to PNG
    // LibreOffice will create slide1.png, slide2.png, etc.
    await execAsync(
      `soffice --headless --convert-to png --outdir "${outputDir}" "${inputFile}"`,
      { timeout: 30000 }
    );
    
    // Find the generated PNG file(s)
    const files = await fs.readdir(outputDir);
    const pngFiles = files.filter(f => f.endsWith('.png'));
    
    if (pngFiles.length === 0) {
      throw new Error('No PNG files generated by LibreOffice');
    }
    
    // Use the first slide (usually slide1.png or similar)
    const firstPng = pngFiles[0];
    const pngPath = path.join(outputDir, firstPng);
    
    console.log(`Reading generated PNG: ${firstPng}`);
    
    // Read the PNG and convert to base64
    const pngBuffer = await fs.readFile(pngPath);
    const base64 = pngBuffer.toString('base64');
    const dataUrl = `data:image/png;base64,${base64}`;
    
    return dataUrl;
    
  } finally {
    // Cleanup temp files
    try {
      await fs.unlink(inputFile);
      await fs.rm(outputDir, { recursive: true, force: true });
    } catch (e) {
      console.error('Cleanup error:', e);
    }
  }
}